Enoncé
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------

## **TP : Gestion de Bibliothèque**



### **Fonctionnalités principales**



1. **Gestion des livres**



   * Ajouter un livre

   * Supprimer un livre

   * Lister les livres avec leurs images (l’image est affichée en haut et les détails du livre en bas).



2. **Règles d’emprunt**



   * Un livre ne peut être emprunté que s’il est disponible.

   * Un membre ne peut pas emprunter plus de **trois livres simultanément**.

   * Durée maximale d’emprunt : **14 jours**.

   * Si le livre est sollicité et déjà emprunté, le membre peut le réserver.

   * Un système de suivi permet d’afficher **les livres les plus populaires** (les plus empruntés).



3. **Gestion des utilisateurs**



   * L’**administrateur** doit pouvoir :



     * Gérer la liste de tous les livres et des membres.

     * Consulter les informations sur les emprunts et réservations.

     * Ajouter un membre et lui attribuer un identifiant et un mot de passe pour se connecter.

   * Le **membre** peut :



     * Consulter la liste des livres disponibles.

     * Emprunter ou réserver un livre selon sa disponibilité.



---



### **Spécifications supplémentaires**



* **Affichage spécial** :



  * Chaque livre est représenté par **une image au-dessus**, suivie de ses détails (titre, auteur, année, disponibilité…).

  * Une section affiche **les livres les plus populaires**.



* **Historique des emprunts** :



  * L’historique complet des emprunts doit être consultable par l’admin.



* **Mises à jour en temps réel** :



  * Lorsqu’un livre est ajouté.

  * Lorsqu’un livre est emprunté (avec le nom de l’emprunteur).

  * Lorsqu’un livre est retourné.



* **Connexion** :



  * Si l’identifiant d’un admin est déjà enregistré dans la base de données, il peut directement se connecter.



---



### **Patterns à implémenter**



* **Front Controller**

* **DAO (Data Access Object)**

* **Singleton**

* **Factory**

Faut aussi implementer le mvc et les principes SOLID dans ce projet je veux d'abord une bd je pensais au table : users, books, reservations, loaned, history(historique des reservations, emprunts, ajout et suppression), puis une arboresence complete pour le projet java ee



------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------
1. Open AI
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------

- Table des utilisateurs (admins + membres)
-- Création de la base de données
CREATE DATABASE IF NOT EXISTS bibliotheque_db;
USE bibliotheque_db;

-- Table des utilisateurs (admins + membres)
CREATE TABLE users (
    user_id VARCHAR(100) PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    surname VARCHAR(50) NOT NULL,
    password VARCHAR(255) NOT NULL,
    role ENUM('ADMIN', 'MEMBER') NOT NULL,
    registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Table des livres
CREATE TABLE books (
    book_id VARCHAR(100) PRIMARY KEY,
    title VARCHAR(100) NOT NULL,
    author VARCHAR(100) NOT NULL,
    year INT,
    image VARCHAR(255),
    category VARCHAR(255),
    description TEXT,
    is_available BOOLEAN DEFAULT TRUE,
    loan_count INT DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Table des emprunts
CREATE TABLE loans (
    loan_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id VARCHAR(100) NOT NULL,
    book_id VARCHAR(100) NOT NULL,
    borrow_date DATE NOT NULL,
    due_date DATE NOT NULL,
    return_date DATE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (book_id) REFERENCES books(book_id) ON DELETE CASCADE
);

-- Table des réservations
CREATE TABLE reservations (
    reservation_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id VARCHAR(100) NOT NULL,
    book_id VARCHAR(100) NOT NULL,
    reservation_date DATE NOT NULL,
    status ENUM('ACTIVE', 'CANCELLED', 'FULFILLED') DEFAULT 'ACTIVE',
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (book_id) REFERENCES books(book_id) ON DELETE CASCADE
);

-- Historique (emprunts, réservations, ajouts, suppressions)
CREATE TABLE history (
    history_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id VARCHAR(100),
    book_id VARCHAR(100),
    action_type ENUM('LOAN', 'RETURN', 'RESERVATION', 'ADD_BOOK', 'DELETE_BOOK', 'ADD_USER', 'DELETE_USER') NOT NULL,
    action_description TEXT NOT NULL,
    action_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE SET NULL,
    FOREIGN KEY (book_id) REFERENCES books(book_id) ON DELETE SET NULL
);



BiblioTech/
│── src/main/java/com/tp/
│   │
│   ├── controller/              # Couche Contrôleur (C de MVC)
│   │   ├── FrontController.java
│   │   ├── BookController.java
│   │   ├── HistoryController.java
│   │   ├── LoanController.java
│   │   ├── ReservationController.java
│   │   └── UserController.java
│   │
│   ├── dao/                     # Couche d'Accès aux Données (DAO)
│   │   ├── interfaces/          # Interfaces DAO (respecte le principe de la DI)
│   │   │   ├── BookDAO.java
│   │   │   ├── HistoryDAO.java
│   │   │   ├── LoanDAO.java
│   │   │   ├── ReservationDAO.java
│   │   │   └── UserDAO.java
│   │   │
│   │   ├── interfaceImpl/       # Implémentations des DAO (CORRIGÉ)
│   │   │   ├── BookDAOImpl.java
│   │   │   ├── HistoryDAOImpl.java
│   │   │   ├── LoanDAOImpl.java
│   │   │   ├── ReservationDAOImpl.java
│   │   │   └── UserDAOImpl.java
│   │   │
│   │   ├── DAOFactory.java      # Fabrique (point d'accès pour les DAO)
│   │   └── DBConnection.java    # Singleton de connexion à la BDD
│   │
│   ├── model/                   # Couche Modèle (M de MVC) - Entités
│   │   ├── Book.java
│   │   ├── History.java
│   │   ├── Loan.java
│   │   ├── Reservation.java
│   │   └── User.java
│   │
│   ├── service/                 # Couche Service - Logique métier
│   │   ├── BookService.java
│   │   ├── HistoryService.java
│   │   ├── LoanService.java
│   │   ├── ReservationService.java
│   │   └── UserService.java
│   │
│   └── util/                    # Utilitaires divers
│
│── src/main/webapp/
│   ├── index.jsp                # Page d'accueil
│   ├── css/
│   │   └── style.css
│   │
│   └── WEB-INF/
│        ├── login.jsp
│        ├── books.jsp
│        ├── reservations.jsp
│        ├── loaned.jsp
│        ├── history.jsp
│        ├── manageBooks.jsp
│        ├── manageUsers.jsp
│        ├── dashboard.jsp
│        │
│        └── web.xml              # Fichier de configuration du déploiement
│
└── pom.xml


--------------------------------------------------------------------------------------------------------
2.gemini
--------------------------------------------------------------------------------------------------------


-- Création de la base de données
CREATE DATABASE IF NOT EXISTS bibliotheque_db;
USE bibliotheque_db;

-- Table des utilisateurs (admins + membres)
CREATE TABLE IF NOT EXISTS users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    role ENUM('ADMIN', 'MEMBER') NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Table des livres
CREATE TABLE IF NOT EXISTS books (
    id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(100) NOT NULL,
    author VARCHAR(100) NOT NULL,
    publication_year INT,
    image VARCHAR(255), -- Chemin ou URL de l'image
    is_available BOOLEAN NOT NULL DEFAULT TRUE,
    loan_count INT NOT NULL DEFAULT 0, -- Compteur de popularité
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Table des emprunts
CREATE TABLE IF NOT EXISTS loans (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    book_id INT NOT NULL,
    borrow_date DATE NOT NULL,
    due_date DATE NOT NULL,
    return_date DATE,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (book_id) REFERENCES books(id) ON DELETE CASCADE,
    CONSTRAINT unique_loan UNIQUE (user_id, book_id, borrow_date)
);

-- Table des réservations
CREATE TABLE IF NOT EXISTS reservations (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    book_id INT NOT NULL,
    reservation_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    status ENUM('PENDING', 'ACTIVE', 'CANCELLED') NOT NULL DEFAULT 'PENDING',
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (book_id) REFERENCES books(id) ON DELETE CASCADE,
    CONSTRAINT unique_reservation UNIQUE (user_id, book_id)
);

-- Table pour l'historique détaillé
CREATE TABLE IF NOT EXISTS history (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    book_id INT,
    action_type ENUM('LOAN', 'RETURN', 'RESERVATION', 'ADD_BOOK', 'DELETE_BOOK') NOT NULL,
    action_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    description TEXT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (book_id) REFERENCES books(id) ON DELETE SET NULL
);




bibliotheque/
│── src/main/java/com/bibliotheque/
│   │
│   ├── controller/              # C (MVC) & Front Controller
│   │   ├── FrontController.java
│   │   ├── BookController.java
│   │   ├── UserController.java
│   │   ├── LoanController.java
│   │   └── ReservationController.java
│   │
│   ├── dao/                     # DAO Interfaces
│   │   ├── BookDAO.java
│   │   ├── UserDAO.java
│   │   ├── LoanDAO.java
│   │   └── ReservationDAO.java
│   │
│   ├── dao/impl/                # Implémentations DAO
│   │   ├── BookDAOImpl.java
│   │   ├── UserDAOImpl.java
│   │   ├── LoanDAOImpl.java
│   │   └── ReservationDAOImpl.java
│   │
│   ├── factory/                 # Factory
│   │   └── DAOFactory.java
│   │
│   ├── model/                   # M (MVC)
│   │   ├── Book.java
│   │   ├── User.java
│   │   ├── Loan.java
│   │   ├── Reservation.java
│   │   └── History.java
│   │
│   ├── service/                 # Services métiers (respect SOLID)
│   │   ├── BookService.java
│   │   ├── UserService.java
│   │   ├── LoanService.java
│   │   └── ReservationService.java
│   │
│   └── util/                    # Utils
│       └── DBConnection.java    # Singleton connexion BD
│
│── src/main/webapp/
│   ├── index.jsp                # Page d’accueil
│   ├── login.jsp                # Connexion
│   ├── books.jsp                # Liste des livres
│   ├── reservations.jsp         # Réservations
│   ├── loaned.jsp               # Emprunts
│   ├── history.jsp              # Historique (admin)
│   │
│   ├── admin/                   # JSP spécifiques admin
│   │   ├── manageBooks.jsp
│   │   ├── manageUsers.jsp
│   │   └── dashboard.jsp
│   │
│   ├── css/
│   │   └── style.css
│   │
│   └── WEB-INF/
│       ├── web.xml              # Config du Front Controller
│       └── lib/                 # Dépendances (JSTL, JDBC…)
│
│── pom.xml                      # Dépendances Maven


------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------
POM.xml

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                             http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.bibliotheque</groupId>
    <artifactId>bibliotheque</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>war</packaging>

    <name>GestionBibliotheque</name>

    <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <!-- Servlet API (Jakarta EE pour Tomcat/Payara) -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>4.0.1</version>
            <scope>provided</scope>
        </dependency>

        <!-- JSP + JSTL -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>

        <!-- JDBC MySQL Connector -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.33</version>
        </dependency>

        <!-- JUnit pour les tests -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.2</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <finalName>bibliotheque</finalName>
        <plugins>
            <!-- Compiler plugin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version>
                <configuration>
                    <source>11</source>
                    <target>11</target>
                </configuration>
            </plugin>

            <!-- War plugin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>3.3.2</version>
                <configuration>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>




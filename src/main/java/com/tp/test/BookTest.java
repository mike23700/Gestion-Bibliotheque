package com.tp.test;

import com.tp.dao.DAOFactory; // Remplacez com.tp.dao.DAOFactory par com.tp.DAO.DAOFactory si votre package est celui-ci
import com.tp.dao.interfaces.BookDAO; // Utilisez LivreDAO si c'est votre interface pour les livres, pas BookDAO

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.DatabaseMetaData; // N'oubliez pas l'import pour DatabaseMetaData

public class BookTest {

    public static void main(String[] args) {
        Connection connection = null; // InitialisÃ©e Ã  null
        try {
            // Obtenez l'instance unique de votre DAOFactory
            DAOFactory daoFactory = DAOFactory.getInstance();

            // --- C'EST LA LIGNE CLÃ‰ MANQUANTE OU MAL PLACÃ‰E ---
            // Tentez d'obtenir une connexion Ã  partir de la fabrique
            //connection = daoFactory.getConnection(); // <-- Assigne la connexion rÃ©elle Ã  la variable 'connection'
            // --- FIN DE LA LIGNE CLÃ‰ MANQUANTE ---

            // Si vous avez besoin d'un BookDAO pour d'autres tests futurs, vous pouvez le garder.
            // Actuellement, il n'est pas utilisÃ© pour le test de connexion lui-mÃªme.
            // LivreDAO livreDAO = daoFactory.getLivreDAO(); // Utilisez getLivreDAO() si c'est la bonne mÃ©thode

            // VÃ©rifiez si la connexion est bien Ã©tablie et ouverte
            if (connection != null && !connection.isClosed()) {
                System.out.println("Connexion Ã  la base de donnÃ©es rÃ©ussie ! ðŸŽ‰");

                // --- VÃ©rification supplÃ©mentaire pour getMetaData() (ajoutÃ©e prÃ©cÃ©demment) ---
                DatabaseMetaData metaData = connection.getMetaData();
                if (metaData != null) {
                    System.out.println("Nom de la base de donnÃ©es : " + metaData.getDatabaseProductName());
                    System.out.println("URL de connexion : " + metaData.getURL());
                } else {
                    System.err.println("Avertissement : connection.getMetaData() a retournÃ© null. Impossible d'obtenir les mÃ©tadonnÃ©es de la base de donnÃ©es.");
                }
                // --- FIN VÃ©rification supplÃ©mentaire ---

            } else {
                // Ce bloc est atteint si getConnection() renvoie null ou une connexion fermÃ©e
                System.err.println("Ã‰chec de la connexion Ã  la base de donnÃ©es : La connexion est nulle ou fermÃ©e.");
            }

        } catch (SQLException e) {
            // Attrapez les exceptions SQL si la connexion Ã©choue (problÃ¨me DB)
            System.err.println("Erreur SQL lors de la tentative de connexion : " + e.getMessage());
            e.printStackTrace(); // Affiche la trace complÃ¨te de l'erreur pour le dÃ©bogage
        } catch (RuntimeException e) {
            // Attrapez les RuntimeException si DAOFactory Ã©choue (ex: JNDI non trouvÃ©)
            System.err.println("Erreur lors de l'initialisation de DAOFactory ou problÃ¨me inattendu : " + e.getMessage());
            e.printStackTrace();
        } finally {
            // Assurez-vous que la connexion est toujours fermÃ©e pour libÃ©rer les ressources
            // (avec un pool de connexions, cela la remet simplement dans le pool)
            if (connection != null) {
                try {
                    connection.close();
                    System.out.println("Connexion fermÃ©e (ou remise au pool).");
                } catch (SQLException e) {
                    System.err.println("Erreur lors de la fermeture de la connexion : " + e.getMessage());
                    e.printStackTrace();
                }
            }
        }
    }
}
